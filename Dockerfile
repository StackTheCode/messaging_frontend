# --- Этап 1: Сборка приложения ---
# Используем базовый образ Node.js для установки зависимостей и сборки фронтенда
FROM node:20-alpine AS build

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы package.json и package-lock.json
# Это позволяет кэшировать зависимости Docker и ускоряет последующие сборки,
# если package.json не изменился
COPY package*.json ./

# Устанавливаем зависимости
RUN npm install

# Копируем исходный код фронтенда
COPY . .

# Переменная окружения для URL API, используемая на этапе сборки
ARG VITE_API_URL

# Собираем приложение для production
# Передаем VITE_API_URL как аргумент на этапе сборки
RUN npm run build

# --- Этап 2: Создание итогового, легкого образа ---
# Используем очень легкий образ Nginx для обслуживания статических файлов фронтенда
FROM nginx:alpine

# Копируем собранные статические файлы из первого этапа в директорию Nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Копируем пользовательский файл конфигурации Nginx (если есть)
# Если у вас есть пользовательский файл nginx.conf, поместите его в корень проекта
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Документируем порт, который Nginx слушает (стандартный HTTP-порт)
EXPOSE 80

# Команда для запуска Nginx при старте контейнера
CMD ["nginx", "-g", "daemon off;"]
